<?php
/**
 * @file
 * Code for the DKAN Feedback feature.
 */

include_once 'dkan_feedback.features.inc';

/**
 * Implements hook_menu().
 */
function dkan_feedback_menu() {
  $items['feedback/add'] = [
    'title' => 'Add Feedback',
    'description' => 'Add a Feedback to content.',
    'page callback' => 'dkan_feedback_add_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'menu_name' => 'main-menu',
    'weight' => 100,
  ];

  $items['node/%/feedback'] = [
    'title' => 'Add Feedback',
    'description' => 'Add a Feedback to content.',
    'page callback' => 'dkan_feedback_add_page',
    'page arguments' => [1],
    'access callback' => 'dkan_feedback_access_tab',
    'access arguments' => [1],
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  ];

  $items['admin/content/feedback'] = array(
    'title' => 'Feedback',
    'description' => 'See published feedback in the site.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('edit any feedback content'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  $items['admin/content/feedback/published'] = array(
    'title' => 'Published Feedback',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/content/feedback/unpublished'] = array(
    'title' => 'Unpublished Feedback',
    'title callback' => 'dkan_feedback_unpublished_count',
    'description' => 'See unpublished feedback in the site.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('edit any feedback content'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/content/feedback/archived'] = array(
    'title' => 'Archived Feedback',
    'title callback' => 'dkan_feedback_archived_count',
    'description' => 'See archived feedback in the site.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('edit any feedback content'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Returns a menu title with the number of unpublished and unarchived feedback.
 */
function dkan_feedback_unpublished_count() {
  $count = db_query("SELECT COUNT(nid) FROM {node} WHERE status = 0 and archived = 0 and type = 'feedback'")->fetchField();
  return t('Unpublished feedback (@count)', array('@count' => $count));
}

/**
 * Returns a menu title with the number of unpublished and archived feedback.
 */
function dkan_feedback_archived_count() {
  $count = db_query("SELECT COUNT(nid) FROM {node} WHERE status = 0 and archived = 1 and type = 'feedback'")->fetchField();
  return t('Archived feedback (@count)', array('@count' => $count));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function dkan_feedback_menu_local_tasks_alter(&$data, $router, $root_path) {
  // Add an action linking to feedback/add to all pages.
  if ($root_path == 'feedback') {
    $data['actions']['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Add Feedback'),
        'href' => 'feedback/add',
        'localized_options' => array(
          'attributes' => array(
            'title' => t('Add Feedback'),
          ),
        ),
      ),
    );
  }
  $node = menu_get_object();
  if (isset($node->type) && $node->type == 'feedback') {
    foreach($data['tabs'][0]['output'] as $key => $value) {
      if ($value['#link']['path'] == 'node/%/members') {
        unset($data['tabs'][0]['output'][$key]);
        $data['tabs'][0]['output'] = array_values($data['tabs'][0]['output']);
      }
    }
  }
}

/**
 * Access callback function for "Add Feedback" menu tab.
 */
function dkan_feedback_access_tab($nid) {
  $types_allowed = array(
    'dataset',
  );

  $node = node_load($nid);

  if (!empty($node)) {
    return in_array($node->type, $types_allowed);
  }

  // Default behaviour: hide the menu.
  return FALSE;
}

/**
 * Callback for 'node/%/feedback'.
 */
function dkan_feedback_add_page($nid = NULL) {
  module_load_include('inc', 'node', 'node.pages');
  global $user;

  $node = (object) [
    'title' => '',
    'type' => 'feedback',
    'language' => LANGUAGE_NONE,
  ];

  if (isset($nid)) {
    $node->title = '';
    $node->field_feedback_entity_reference[LANGUAGE_NONE][0]['target_id'] = $nid;
  }

  $form = drupal_get_form('feedback_node_form', $node);
  $form['og_group_ref']['#access'] = FALSE;

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function dkan_feedback_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id == 'feedback_node_form') {
    // Prevent Anonymous users from accessing the "Moderation state" checkbox set
    // later via workbench_moderation.
    $form['revision_information']['#access'] = FALSE;

    if (!$user->uid) {
      $form['actions']['submit']['#access'] = TRUE;
      $form['actions']['preview']['#access'] = FALSE;
    } else {
      $form['field_contact_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->name;
      $form['field_contact_email'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->mail;
    }
    $not_og_ref_validate = function($value) {
      return $value != 'og_form_group_reference_validate';
    };
    $form['#validate'] = array_filter($form['#validate'], $not_og_ref_validate);
    $form['actions']['submit']['#submit'][] = 'dkan_feedback_submit';
  }
}


/**
 * Node feedback submit callback.
 */
function dkan_feedback_submit(&$form, &$form_state) {
  $_GET['destination'] = '/feedback';
}


/**
 * Implements hook_node_presave().
 */
function dkan_feedback_node_presave($node) {
  // Do not override the user once node is created.
  if ($node->type == 'feedback' && $node->is_new) {
    global $user;
    $node->uid = $user->uid;
    if (!empty($node->field_feedback_entity_reference)) {
      $ref = node_load($node->field_feedback_entity_reference['und'][0]['target_id']);
      $node->og_group_ref = $ref->og_group_ref;
    }
  }
}

/**
 * Implements hook_rate_templates().
 */
function dkan_feedback_rate_templates() {
  $templates = array();
  $templates['feedback'] = new stdClass();
  $templates['feedback']->value_type = 'points';
  $templates['feedback']->options = array(
    array(1, '+1'),
    array(-1, '-1'),
  );
  $templates['feedback']->theme = 'rate_template_feedback';
  $templates['feedback']->customizable = FALSE;
  $templates['feedback']->translate = TRUE;
  $templates['feedback']->template_title = t('Feedback up / down');

  return $templates;
}

/**
 * Implements hook_theme().
 */
function dkan_feedback_theme() {
  $theme = array();
  $theme['rate_template_feedback']  = [
    'variables' => [
      'links' => NULL,
      'results' => NULL,
      'mode' => NULL,
      'just_voted' => FALSE,
      'content_type' => NULL,
      'content_id' => NULL,
      'display_options' => NULL,
    ],
    'template' => 'rate-template-feedback',
    'path' => drupal_get_path('module', 'dkan_feedback') . '/templates/feedback',
  ];

  $theme['feedback_profile_badge']  = [
    'variables' => [
      'path' => drupal_get_path('module', 'dkan_feedback') . '/templates/feedback',
    ],
  ];
  return $theme;
}

/**
 * Theme function for feedback profile badge.
 */
function theme_feedback_profile_badge($variables) {
  $output = "<img src='$variables[path]/default-person.png' />";
  return $output;
}

/**
 * Preprocess function for the feedback template.
 */
function dkan_feedback_preprocess_rate_template_feedback(&$variables) {
  extract($variables);
  $up_classes = 'fa fa-angle-up';
  $down_classes = 'fa fa-angle-down';
  if (isset($results['user_vote'])) {
    switch ($results['user_vote']) {
      case $links[0]['value']:
        $up_classes .= ' rate-voted';
        break;

      case $links[1]['value']:
        $down_classes .= ' rate-voted';
        break;
    }
  }
  $variables['up_button'] = dkan_feedback_rate_button("Upvote", $links[0]['href'], $up_classes);
  $variables['down_button'] = dkan_feedback_rate_button("Downvote", $links[1]['href'], $down_classes);

  if ($results['rating'] > 0) {
    $score = '+' . $results['rating'];
    $score_class = 'positive';
  }
  elseif ($results['rating'] < 0) {
    $score = $results['rating'];
    $score_class = 'negative';
  }
  else {
    $score = 0;
    $score_class = 'neutral';
  }
  $variables['score'] = $score;
  $variables['score_class'] = $score_class;

  $info = array();
  if ($mode == RATE_CLOSED) {
    $info[] = t('Voting is closed.');
  }
  if ($mode != RATE_COMPACT && $mode != RATE_COMPACT_DISABLED) {
    if (isset($results['user_vote'])) {
      $info[] = t("You voted '@option'.", [
        '@option' => $results['user_vote'] == 1 ? $links[0]['text'] : $links[1]['text'],
      ]);
    }
  }
  $variables['info'] = implode(' ', $info);
}

/**
 * Helper function for building accessible up/down link.
 *
 * Based on theme_rate_button from module rate.
 */
function dkan_feedback_rate_button($text, $href, $class) {
  static $id = 0;
  $id++;

  $classes = 'rate-button';
  if ($class) {
    $classes .= ' ' . $class;
  }
  if (empty($href)) {
    // Widget is disabled or closed.
    return '<span class="' . $classes . '" id="rate-button-' . $id . '">' .
      check_plain($text) .
      '</span>';
  } else {
    return '<a class="' . $classes . '" id="rate-button-' . $id . '" rel="nofollow" href="' . htmlentities($href) . '" title="' . check_plain($text) . '">' .
        '<span class="sr-only">' . check_plain($text) . '</span>' .
      '</a>';
  }
}

/**
 * Implements hook_preprocess_THEME().
 */
function dkan_feedback_preprocess_views_view_table(&$vars) {
  if ($vars['view']->name == "feedback") {
    $vars['header'] = array();
    foreach ($vars['field_classes']['title'] as $key => $value) {
      if ($vars['view']->result[$key]->node_uid != 0) {
        $vars['field_classes']['title'][$key] = $value . " authenticated-user";
      }
    }
  }
}

/**
 * Implements hook_strongarm_alter().
 *
 */

function dkan_feedback_strongarm_alter(&$data) {
  if (isset($data['rate_widgets'] )) {
    foreach ($data['rate_widgets']-> value as $key => $value) {
      if ($value->name == 'feedback') {
        $value->css = drupal_get_path('module', 'dkan_feedback') . '/templates/feedback/feedback.css';
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function dkan_feedback_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'dkan_feedback') . '/templates/feedback/feedback.css');
}

/**
 * Implements hook_action_info().
 */
function dkan_feedback_action_info() {
  return array(
    'dkan_feedback_archive_feedback' => array(
      'type' => 'node',
      'label' => t('Archive feedback'),
      'behavior' => array('changes_property'),
      'configurable' => false,
      'vbo_configurable' => false,
      'triggers' => array('any'),
    ),
    'dkan_feedback_unarchive_feedback' => array(
      'type' => 'node',
      'label' => t('Unarchive feedback'),
      'behavior' => array('changes_property'),
      'configurable' => false,
      'vbo_configurable' => false,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Added vbo function for archiving nodes.
 */
function dkan_feedback_archive_feedback(&$node, $context) {
  if ($node->type == 'feedback') {
    $node->archived = 1;
    $node->status = 0;
  }
}

/**
 * Added vbo function for unarchiving nodes.
 */
function dkan_feedback_unarchive_feedback(&$node, $context) {
  if ($node->type == 'feedback') {
    $node->archived = 0;
  }
}
